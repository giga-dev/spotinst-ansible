---
- name: Create Machines For Automation
  connection: local
  gather_facts: False
  hosts: localhost
  tasks:
    - name: "create elastic group"
      spotinst_aws_elastigroup:
        state: present
        risk: 100
        availability_vs_cost: balanced
        availability_zones:
          - name: "{{ availability_zone_region }}"
            subnet_id: "{{ availability_zone_subnet_id }}"
        image_id: "{{ ami_id }}"
        key_pair: "{{ key_name }}"
        min_size: 0
        max_size: "{{ spotinst_instances }}"
        target: "{{ spotinst_instances }}"
        unit: instance
        monitoring: True
        name: "{{ spotinst_group_name }}"
        on_demand_instance_type: "{{ instance_type }}"
        product: "{{product_type}}"
        # - tal-lb-1
        security_group_ids:
          - "{{ security_group }}"
        spot_instance_types:
          - "{{ instance_type }}"
        wait_for_instances: True
        wait_timeout: 600
        network_interfaces:
          - associate_public_ip_address: true
            device_index: 0
        tags:
          - Name: "{{ spotinst_group_name }}"
        #state: absent
        block_device_mappings:
          - device_name: '/dev/xvda'
            ebs:
              volume_size: 80
              volume_type: gp2
              deleteOnTermination: True
      register: ec2
    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=0 timeout=600 state=started
      with_items: "{{ ec2.instances }}"
    - name: Delete all_hosts file
      shell: rm -rf "{{hosts_file}}.public" "{{hosts_file}}.private"
    - name: Store public ips to all_hosts file
      shell: printf "{{ item.public_ip }}"\\n >> "{{hosts_file}}.public"
      with_items: "{{ ec2.instances }}"

    - name: Store private ips to all_hosts file
      shell: printf "{{ item.private_ip }}"\\n >> "{{hosts_file}}.private"
      with_items: "{{ ec2.instances }}"

    - name: Add all instance public IPs to machinesgrp group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: machinesgrp
      with_items: "{{ ec2.instances }}"

- hosts: machinesgrp
  name: Running installations on machines
  gather_facts: true
  user: ec2-user
  vars:
    userdata: "{{ lookup('file', 'user-data.sh') | replace('JAVA_URL_HERE', java_url) }}"
  tasks:
    - name: "Install Java"
      shell: "{{ userdata }}"
      args:
        executable: /bin/bash
    - name: "Install fontconfig"
      shell: "yum install fontconfig -y"
      become: true
    - name: "Link linc.musl"
      shell: "ln -s /usr/lib/libfontconfig.so.1 /usr/lib/libfontconfig.so && \
              ln -s /lib/libuuid.so.1 /usr/lib/libuuid.so.1 && \
              ln -s /lib/libc.musl-x86_64.so.1 /usr/lib/libc.musl-x86_64.so.1"
      become: true
    - name: "Env LD_LIBRARY_PATH"
      shell: "export LD_LIBRARY_PATH=/usr/lib"
      become: true